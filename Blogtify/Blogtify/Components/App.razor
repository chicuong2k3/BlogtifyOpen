<!DOCTYPE html>
<html lang="vi" bit-theme-system bit-theme-persist>

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="Content-Security-Policy"
          content="
        default-src 'self';
        script-src 'self' 'unsafe-inline' 'unsafe-eval'
          https://cdn.jsdelivr.net
          https://cdnjs.cloudflare.com
          https://unpkg.com
          https://pagead2.googlesyndication.com
          https://www.googletagservices.com
          https://googleads.g.doubleclick.net
          https://ep2.adtrafficquality.google;
        style-src 'self' 'unsafe-inline'
          https://fonts.googleapis.com
          https://cdn.jsdelivr.net;
        font-src 'self'
          https://fonts.gstatic.com
          https://cdn.jsdelivr.net;
        img-src 'self' data: https:;
        connect-src 'self' https: http://localhost:* ws://localhost:*
          https://pagead2.googlesyndication.com
          https://googleads.g.doubleclick.net;
        frame-src 'self'
          https://*.google.com
          https://*.googlesyndication.com
          https://*.doubleclick.net
          https://ep2.adtrafficquality.google;
      ">

    <base href="/" />

    <link href="@Assets["css/fonts.css"]" rel="stylesheet" />
    <script>
        // disable auto-zoom of iOS Safari when focusing an input
        (/iPad|iPhone|iPod/.test(navigator.userAgent)) &&
        (document.querySelector('meta[name="viewport"]').content = 'width=device-width, initial-scale=1.0, viewport-fit=cover, maximum-scale=1.0')
    </script>
    <link href="@Assets["_content/Bit.BlazorUI/styles/bit.blazorui.css"]" rel="stylesheet" />
    <link href="@Assets["_content/Bit.BlazorUI.Icons/styles/bit.blazorui.icons.css"]" rel="stylesheet" />


    <link href="@Assets["css/theme.css"]" rel="stylesheet" />
    <link href="@Assets["css/app.css"]" rel="stylesheet" />
    <link href="@Assets["Blogtify.styles.css"]" rel="stylesheet" />

    <link href="@Assets["css/prism.min.css"]" rel="stylesheet" />
    <link href="@Assets["css/prism-coy-without-shadows.min.css"]" rel="stylesheet" id="code-block-stylesheet" />
    <link href="@Assets["css/prism-show-language.min.css"]" rel="stylesheet" />


    <HeadOutlet @rendermode="InteractiveWebAssembly" />
</head>

<body class="line-numbers">
    <Routes @rendermode="InteractiveWebAssembly" />

    <script src="_framework/blazor.web.js" autostart="false"></script>

    <script webworker-enabled type="module">
        import * as wasmFeatureDetect from './js/wasm-feature-detect.1.8.0.js';

        async function startBlazor() {
            await new Promise(resolve => {
                if (window.Blazor) return resolve();
                const check = setInterval(() => {
                    if (window.Blazor) {
                        clearInterval(check);
                        resolve();
                    }
                }, 50);
            });

            const url = new URL(location.href);
            const verboseStart = url.searchParams.get('verboseStart') === '1';
            const forceCompatMode = url.searchParams.get('forceCompatMode') === '1';
            const supportsSimd = await wasmFeatureDetect.simd();
            const supportsExceptions = await wasmFeatureDetect.exceptions();
            let useCompatMode = !supportsSimd || forceCompatMode;

            const getRuntimeType = () => {
                for (const script of document.scripts) {
                    if (script.src.includes('_framework/blazor.web.js')) return 'united';
                    if (script.src.includes('_framework/blazor.webassembly.js')) return 'wasm';
                }
                return '';
            };

            const runtimeType = getRuntimeType();
            const webAssemblyConfig = {
                loadBootResource: (type, name, defaultUri) =>
                    useCompatMode ? defaultUri.replace('_framework/', '_frameworkCompat/') : defaultUri,
            };

            if (runtimeType === 'wasm') {
                Blazor.start(webAssemblyConfig);
            } else if (runtimeType === 'united') {
                Blazor.start({ webAssembly: webAssemblyConfig });
            } else {
                webAssemblyConfig.webAssembly = webAssemblyConfig;
                Blazor.start(webAssemblyConfig);
            }
        }

        startBlazor();
    </script>

    <script src="@Assets["_content/Bit.BlazorUI/scripts/bit.blazorui.js"]"></script>

    <script src="@Assets["js/theme.js"]" defer></script>
    <script src="@Assets["js/app.js"]" defer></script>

    <script src="@Assets["js/code-block.js"]" defer></script>
    <script src="@Assets["js/prism-core.min.js"]" defer></script>
    <script src="@Assets["js/prism-autoloader.min.js"]" defer></script>
    <script src="@Assets["js/prism-clike.min.js"]" defer></script>
    <script src="@Assets["js/prism-markup.min.js"]" defer></script>
    <script src="@Assets["js/prism-csharp.min.js"]" defer></script>
    <script src="@Assets["js/prism-yaml.min.js"]" defer></script>
    <script src="@Assets["js/prism-javascript.min.js"]" defer></script>
    <script src="@Assets["js/prism-typescript.min.js"]" defer></script>
    <script src="@Assets["js/prism-css.min.js"]" defer></script>
    <script src="@Assets["js/prism-bash.min.js"]" defer></script>
    <script src="@Assets["js/prism-python.min.js"]" defer></script>
    <script src="@Assets["js/prism-sql.min.js"]" defer></script>
    <script src="@Assets["js/prism-http.min.js"]" defer></script>
    <script src="@Assets["js/prism-show-language.min.js"]" defer></script>

    <!-- Adsense: Lazy load after onload to reduce third-party block -->
    <script>
        window.addEventListener('load', () => {
            const script = document.createElement('script');
            script.async = true;
            script.src = 'https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-6107540643501285';
            script.crossOrigin = 'anonymous';
            document.head.appendChild(script);
        });
    </script>

    <script>
        function initMath() {
                window.mathjaxReady.then((MathJax) => {
                    MathJax.typesetPromise().catch(err => console.error('MathJax typeset error:', err));
                }).catch(err => console.error('MathJax load error:', err));
        }

        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if(entry.isIntersecting) initMath();
            });
        });
        document.querySelectorAll('.math-block').forEach(el => observer.observe(el));
    </script>

    <script src="https://cdn.jsdelivr.net/npm/mermaid@9/dist/mermaid.min.js" defer></script>
    <script defer>
        window.addEventListener('DOMContentLoaded', () => {
          if (window.mermaid) {
            mermaid.initialize({ startOnLoad: true });
          }
        });
    </script>

</body>

</html>
