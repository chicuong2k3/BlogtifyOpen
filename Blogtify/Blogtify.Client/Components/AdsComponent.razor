@using Microsoft.Extensions.Options
@inject IOptions<AdSenseSettings> AdSenseOptions
@inject IJSRuntime JSRuntime

<div @ref="_adContainer">
    <ins class="adsbygoogle"
         style="display:block"
         @attributes="BuildAttributes()"></ins>
</div>

@code {
    [Parameter] public AdsType Type { get; set; }
    [Parameter] public string SlotId { get; set; } = string.Empty;
    [Parameter] public string LayoutKey { get; set; } = string.Empty;

    private ElementReference _adContainer;
    private IJSObjectReference? _module;

    private Dictionary<string, object> BuildAttributes()
    {
        var attrs = new Dictionary<string, object>
        {
            ["data-ad-client"] = AdSenseOptions.Value.ClientId,
            ["data-ad-slot"] = SlotId
        };

        switch (Type)
        {
            case AdsType.Display:
                attrs["data-ad-format"] = "auto";
                attrs["data-full-width-responsive"] = "true";
                break;

            case AdsType.InArticle:
                attrs["data-ad-format"] = "fluid";
                attrs["data-ad-layout"] = "in-article";
                break;

            case AdsType.Multiplex:
                attrs["data-ad-format"] = "autorelaxed";
                break;

            case AdsType.InFeed:
                attrs["data-ad-format"] = "fluid";
                attrs["data-ad-layout-key"] = LayoutKey;
                break;
        }

        return attrs;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_module is null)
        {
            _module = await JSRuntime.InvokeAsync<IJSObjectReference>(
                "import", "./Components/AdsComponent.razor.js");
        }

        await _module.InvokeVoidAsync("renderAd");
    }

    public async ValueTask DisposeAsync()
    {
        if (_module is not null)
            await _module.DisposeAsync();
    }

    public enum AdsType
    {
        Display,
        InArticle,
        Multiplex,
        InFeed
    }
}
