@using System.Security.Claims
@using Blogtify.Client.Auth
@using Blogtify.Client.Shared.Comments
@using Blogtify.Client.Shared.Services
@using Microsoft.AspNetCore.Authorization
@inject ICommentService CommentService
@inject IAuthorizationService AuthorizationService 

@if (CommentDto is not null)
{
    <BitStack Style="width:100%" Gap="0">
        <BitCard Style="background:none; width:100%">
            <BitStack Horizontal Gap="8px" VerticalAlign="BitAlignment.Start">
                <BitPersona Size="BitPersonaSize.Size32"
                            PrimaryText="@(commenter?.Name?[0].ToString().ToUpper() ?? "?")"
                           ImageUrl="@commenter?.Picture" />

                <BitStack Gap="4px" Style="width:100%">
                    @if (commenter is not null)
                    {
                        <BitText>
                            @commenter.Name
                        </BitText>
                    }
                    else
                    {
                        <BitText>Người dùng đã bị xoá</BitText>
                    }

                    <BitText Typography="BitTypography.Caption1"
                             Style="opacity:.7">
                        @CommentDto.CreatedAt.ToLocalTime().ToString("dd/MM/yyyy")
                    </BitText>

                    <BitText Typography="BitTypography.Body1" Style="white-space:pre-wrap">
                        @((MarkupString)CommentDto.Content)
                    </BitText>

                    <AuthorizeView Context="UserContext">
                        <Authorized>
                            <BitStack Horizontal
                                      Gap="16px" 
                                      VerticalAlign="BitAlignment.Center"
                                      Style="margin-top:4px">

                                <BitStack Horizontal VerticalAlign="BitAlignment.Center" Gap="4px">
                                    <BitButton IconName="Like" Size="BitSize.Small"
                                               OnClick="()=>{}"
                                               Style="padding:2px 4px;min-width:0;" />
                                    <BitText Typography="BitTypography.Body2">253</BitText>
                                </BitStack>

                                <BitStack Horizontal VerticalAlign="BitAlignment.Center" Gap="4px">
                                    <BitButton IconName="Dislike" Size="BitSize.Small"
                                                OnClick="()=>{}"
                                               Style="padding:2px 4px;min-width:0;" />
                                    <BitText Typography="BitTypography.Body2">2</BitText>
                                </BitStack>

                                @if (!CommentDto.ParentCommentId.HasValue)
                                {
                                    <BitButton
                                               Style="padding:0;min-width:0;"
                                               OnClick="ReplyComment" />
                                }

                                @if (canManageComment)
                                {
                                    <BitButton 
                                               Style="padding:0;min-width:0;"
                                               OnClick="OpenDeleteCommentDialog" />
                                }
                            </BitStack>

                            @if (showReplies)
                            {
                                <div style="margin-top:12px;">
                                    @if (!isRepliesShowing)
                                    {
                                        @* <CommentList CommentInputLines="3"
                                                     ContentId="@CommentDto.ContentId"
                                                     ParentCommentId="@CommentDto.Id" /> *@
                                    }
                                    else
                                    {
                                        <BitProgress Label="Đang tải..." />
                                    }
                                </div>
                            }
                            else if (CommentDto.ChildrenCount > 0)
                            {
                                <BitButton 
                                           Style="padding:0;min-width:0;"
                                           OnClick="ShowReplies" />
                            }
                        </Authorized>
                    </AuthorizeView>
                </BitStack>
            </BitStack>
        </BitCard>
    </BitStack>
}

@code {
    [Parameter] public CommentDto? CommentDto { get; set; }

    [Parameter] public EventCallback<Guid> OnCommentDeleted { get; set; }

    private UserInfo? commenter;
    private bool showReplies;
    private bool isRepliesShowing;
    private bool canManageComment;

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; } = default!;

    private ClaimsPrincipal? user;

    protected override async Task OnInitializedAsync()
    {
        user = (await AuthenticationStateTask).User;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (CommentDto is not null)
        {
            // var response = await UserService.GetUserByIdAsync(CommentDto.UserId);
            // commenter = response;

            // if (user is not null)
            // {
            //     canManageComment = await AuthorizationService.IsAuthorizedToManageComment(user, CommentDto.Id);
            // }
        }
    }

    private async Task ShowReplies()
    {
        isRepliesShowing = true;
        showReplies = true;
        await Task.Delay(500);
        isRepliesShowing = false;
    }

    private void ReplyComment()
    {
        showReplies = true;
    }

    private async Task OpenDeleteCommentDialog()
    {
        var parameters = new Dictionary<string, object>
        {
            { "CommentId", CommentDto!.Id }
        };

        // var result = await DialogService.OpenAsync<DeleteCommentDialog>("Xoá bình luận", parameters, new DialogOptions { Width = "400px" });

        // if (result is true && CommentDto is not null)
        // {
        //     await OnCommentDeleted.InvokeAsync(CommentDto.Id);
        // }
    }
}

