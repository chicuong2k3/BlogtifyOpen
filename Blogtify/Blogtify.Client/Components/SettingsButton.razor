@inject IFontProvider FontProvider
@inject IJSRuntime JSRuntime
@inject HotKeys HotKeys
@inject BitThemeManager BitThemeManager

<div id="settingsWrapper">
    <BitButton IconName="@BitIconName.Settings"
               AriaLabel="Cài đặt"
               Size="BitSize.Large"
               Class="settings-btn"
               OnClick="ToggleSettingsMenu" />

    <div class="settingsMenu @(showSettingsMenu ? "show" : "")">
        <BitStack Gap="0">
            @foreach (var item in mainMenu)
            {
                <BitButton FullWidth
                           Style="border-radius: 0;"
                           OnClick="@(() => ToggleSubMenu(item.Id))">
                    @item.Label
                </BitButton>
            }
        </BitStack>

        @if (showFontMenu)
        {
            <BitSeparator />
            @RenderMenu(fontList, selectedFont, ChangeFont)
        }

        @if (showFontSizeMenu)
        {
            <BitSeparator />
            @RenderMenu(fontSizeList, selectedFontSize, ChangeFontSize)
        }
    </div>
</div>

@code {
    private bool showSettingsMenu;
    private bool showFontMenu;
    private bool showFontSizeMenu;

    private HotKeysContext? _hotKeysContext;
    private IJSObjectReference? _module;
    private DotNetObjectReference<object>? selfRef;

    private string selectedFont = "Be VietNam Pro";
    private string selectedFontSize = "14px";

    private readonly List<(string Id, string Label)> mainMenu =
    [
        ("font", "ĐỔI PHÔNG CHỮ"),
        ("fontsize", "ĐỔI KÍCH CỠ CHỮ")
    ];

    private readonly List<string> fontList = Constants.Fonts;


    private readonly List<string> fontSizeList = Enumerable.Range(14, 5).Select(x => $"{x}px").ToList();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        selectedFont = await FontProvider.GetFontAsync();
        await ChangeFont(selectedFont, false);

        selectedFontSize = await FontProvider.GetFontSizeAsync();
        await ChangeFontSize(selectedFontSize, false);

        _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Components/SettingsButton.razor.js");

        selfRef = DotNetObjectReference.Create<object>(this);
        await _module.InvokeVoidAsync("outsideClickHelper.register", "#settingsWrapper", selfRef);

        _hotKeysContext = HotKeys.CreateContext()
                                 .Add(ModCode.Ctrl, Code.Q, ToggleSettingsMenu, new());
    }

    private void ToggleSettingsMenu()
    {
        showSettingsMenu = !showSettingsMenu;
        if (!showSettingsMenu)
        {
            showFontMenu = showFontSizeMenu = false;
        }
    }

    private void ToggleSubMenu(string menu)
    {
        showFontMenu = menu == "font" && !showFontMenu;
        showFontSizeMenu = menu == "fontsize" && !showFontSizeMenu;

        if (menu == "font") showFontSizeMenu = false;
        if (menu == "fontsize") showFontMenu = false;
    }

    private async Task ChangeFont(string font, bool closeMenu = true)
    {
        selectedFont = font;
        await FontProvider.SetFontAsync(font);
        await JSRuntime.InvokeVoidAsync("themeSwitcher.loadGoogleFont", font);
        await JSRuntime.InvokeVoidAsync("themeSwitcher.setFont", font);
    }

    private async Task ChangeFontSize(string size, bool closeMenu = true)
    {
        selectedFontSize = size;
        await FontProvider.SetFontSizeAsync(size);
        await JSRuntime.InvokeVoidAsync("themeSwitcher.setFontSize", size);
    }

    private RenderFragment RenderMenu(IEnumerable<string> items, string selected, Func<string, bool, Task> onClick)
        => @<BitStack Gap="0" Style="max-height:250px; overflow-y:auto;">
@foreach (var item in items)
    {
    <div style="width: 100%">
        <BitButton FullWidth OnClick="@(() => onClick(item, false))"
                   Class="submenu-btn" Color="BitColor.Secondary">
            <BitStack Horizontal
                      HorizontalAlign="BitAlignment.SpaceBetween"
                      VerticalAlign="BitAlignment.Center">
                <BitText>@item</BitText>
                @if (item == selected)
                                {
                <BitIcon IconName="@BitIconName.CheckMark" Color="BitColor.Tertiary" />
                                }
            </BitStack>
        </BitButton>
    </div>
    }
</BitStack>;

[JSInvokable]
public void CloseMenus()
{
    if (showSettingsMenu)
    {
        showSettingsMenu = false;
        StateHasChanged();
    }
}

public async ValueTask DisposeAsync()
{
    if (_hotKeysContext is not null)
        await _hotKeysContext.DisposeAsync();

    if (_module is not null)
        await _module.DisposeAsync();

    selfRef?.Dispose();
}
}
