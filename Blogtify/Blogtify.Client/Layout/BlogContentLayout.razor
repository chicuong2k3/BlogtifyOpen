@inherits LayoutComponentBase
@layout MainLayout

@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject AppDataManager AppDataManager
@using Microsoft.Extensions.Options
@inject IOptions<AdSenseSettings> AdSenseOptions

<HeadContent>
    <meta name="description" content="@(_currentContent?.SeoDescriptions ?? _currentContent?.Title)" />
</HeadContent>

<BitCard NoShadow>
    <ChildContent>
        @if (_currentContent is not null)
        {
            <BitStack Style="margin-bottom: 8px">
                <BitText Color="BitColor.Primary" Typography="BitTypography.H1" Align="BitTextAlign.Center" Style="width: 100%">
                    @_currentContent.Title
                </BitText>

                @if (!string.IsNullOrEmpty(_currentContent.Category))
                {
                    <div>
                        <BitTag Color="BitColor.Primary" Text="@_currentContent.Category" AriaLabel="@_currentContent.Category"
                                OnClick="@(() => NavigationManager.NavigateTo($"?page=1&pageSize={Constants.PageSize}&categories={_currentContent.Category}"))"
                                Class="category-tag">

                        </BitTag>
                    </div>
                }
            </BitStack>

            <div class="content" @ref="_contentRef">
                @Body
            </div>
        }
    </ChildContent>
</BitCard>

<!-- Comments section -->
@* <BitCard NoShadow FullWidth Style="margin-top: 4px">
    <ChildContent>
        <BitText Typography="BitTypography.H1">Bình luận</BitText>
        @if (_isLoading)
        {

        }
        <div id="disqus_thread"></div>
    </ChildContent>
</BitCard> *@

<!-- Related posts -->
<BitCard NoShadow FullWidth Style="margin-top: 4px">
    <ChildContent>
        <BitStack>
            <BitText Typography="BitTypography.H1">Gợi ý</BitText>
            <RelatedPosts Content="@_currentContent" />
        </BitStack>
    </ChildContent>
</BitCard>

<div class="reading-progress-container">
    <BitProgress Percent="_progress"
                 AriaLabel="@($"{_progress}%")" AriaValueText="_progress"
                 Thickness="10" />
</div>

@code {
    private IJSObjectReference? _module;
    private ContentDto? _currentContent;
    private string _bookmarkKey => $"article-{_currentContent?.Route}-scroll";
    private DotNetObjectReference<BlogContentLayout>? _dotNetRef;
    private ElementReference _contentRef;
    private double _progress;

    protected override void OnParametersSet()
    {
        var currentUrl = new Uri(NavigationManager.Uri).AbsolutePath;
        _currentContent = AppDataManager.GetContentByRoute(currentUrl);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "/Layout/BlogContentLayout.razor.js");
        _dotNetRef ??= DotNetObjectReference.Create(this);

        //await ResetDisqus(_currentContent?.Route, NavigationManager.Uri);

        // await _module.InvokeVoidAsync("loadScrollPosition", _bookmarkKey);
        // await _module.InvokeVoidAsync("addScrollListener", _bookmarkKey);
        await _module.InvokeVoidAsync("readingProgressInit", _dotNetRef, _contentRef);
        await _module.InvokeVoidAsync("renderMath", _contentRef);

        // NavigationManager.LocationChanged += OnLocationChanged;

        StateHasChanged();
    }

    private async void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (_module is null) return;

        await _module.InvokeVoidAsync("removeScrollListener");

        var currentUrl = new Uri(e.Location).AbsolutePath;
        _currentContent = AppDataManager.GetContentByRoute(currentUrl);

        await ResetDisqus(_currentContent?.Route, e.Location);

        if (_contentRef.Context is not null)
        {
            _dotNetRef = DotNetObjectReference.Create(this);
            //await _module.InvokeVoidAsync("loadScrollPosition", _bookmarkKey);
            //await _module.InvokeVoidAsync("addScrollListener", _bookmarkKey);
            await _module.InvokeVoidAsync("readingProgressInit", _dotNetRef, _contentRef);
        }

        StateHasChanged();
    }

    [JSInvokable]
    public void UpdateProgress(double progress)
    {
        _progress = progress;
        StateHasChanged();
    }

    public async Task ResetDisqus(string? identifier, string url)
    {
        if (_module is null || string.IsNullOrEmpty(identifier)) return;

        await _module.InvokeVoidAsync("addDisqusComments",
            DotNetObjectReference.Create(new CallbackHelper(this, identifier, url)));
    }

    public async ValueTask DisposeAsync()
    {
        if (_module is not null)
        {
            await _module.InvokeVoidAsync("removeScrollListener");
            await _module.DisposeAsync();
        }

        NavigationManager.LocationChanged -= OnLocationChanged;
        _dotNetRef?.Dispose();
    }
}
