@using Microsoft.Extensions.Options
@using Bit.BlazorUI
@inherits LayoutComponentBase

@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject AppDataManager AppDataManager
@inject IOptions<AdSenseSettings> AdSenseOptions
@inject BitThemeManager BitThemeManager

<PageTitle>Code Magic</PageTitle>

<HeadContent>
    <meta name="description"
          content="Code Magic là không gian chuyên sâu lưu trữ và trao đổi kiến thức về phát triển phần mềm, lập trình điện tử, toán học và vật lý. Khám phá hành trình biến khoa học thành công cụ giải quyết vấn đề phức tạp." />
</HeadContent>

@if (!RendererInfo.IsInteractive)
{
    <div>
        <BitOverlay IsOpen="true" Class="overlay">
            <div class="loading-spinner"></div>
            <div class="loading-text">
                <span>Đang tải</span>
                <div class="loading-dots">
                    <div class="dot"></div>
                    <div class="dot"></div>
                    <div class="dot"></div>
                </div>
            </div>
        </BitOverlay>
    </div>
}

<CascadingValue Value="@IsDark">
    <BitThemeProvider>
        <AppBar OnToggleDrawer="@ToggleDrawer" OnToggleTheme="@ToggleTheme" />

        <!-- Sidebar Desktop -->
        <aside class="sidebar desktop">
            <BitNav Items="@sidebarItems" AriaLabel="Menu bên"
                    DefaultSelectedItem="@sidebarItems[0]"
                    AllExpanded Mode="BitNavMode.Automatic" Style="width: 230px"
                    Match="BitNavMatch.Prefix" SelectedItem="@selectedItem"
                    OnItemClick="(BitNavItem item) => OnSelectedItemChanged(item)" />
        </aside>

        <!-- Sidebar Mobile (Drawer) -->
        <div class="sidebar" aria-label="Menu bên">
            <BitPanel @bind-IsOpen="isDrawerOpen" AriaLabel="Menu bên"
                      Position="BitPanelPosition.Start">
                <BitNav Items="@sidebarItems" DefaultSelectedItem="@sidebarItems[0]"
                        AllExpanded Mode="BitNavMode.Automatic" Style="width: 230px"
                        Match="BitNavMatch.Prefix" SelectedItem="@selectedItem"
                        OnItemClick="(BitNavItem item) => OnSelectedItemChanged(item)" />
            </BitPanel>
        </div>
        <main class="main-content">
            @Body
        </main>

        <Footer />


        @*   <SettingsButton /> *@
        <BackToTopButton />
    </BitThemeProvider>
</CascadingValue>

@code {
    private List<BitNavItem> sidebarItems = new();
    private bool isDrawerOpen;
    private BitNavItem selectedItem = new();

    private bool IsDark = false;

    private IJSObjectReference? _module;

    protected override void OnInitialized()
    {
        var postCategories = AppDataManager.AllPostCategories;

        var root = new BitNavItem
        {
            Text = "CHỦ ĐỀ",
            IconName = "Bookmarks",
            AriaLabel = "Chủ đề",
            ChildItems = postCategories.Select(BuildSidebarItem).ToList()
        };

        sidebarItems =
        [
            root,
            new BitNavItem
            {
                Text = "GIỚI THIỆU",
                IconName = "Info",
                AriaLabel = "Giới thiệu",
                Url = "/about"
            }
        ];

        UpdateSelectedItem();
    }

    protected override async Task OnInitializedAsync()
    {
        var currentTheme = await BitThemeManager.GetCurrentThemeAsync();
        IsDark = currentTheme?.Contains("dark") ?? false;
    }

    private BitNavItem BuildSidebarItem(string category) => new()
    {
        Text = category.ToUpperInvariant(),
        IconName = "Cafe",
        Url = $"/?categories={category}",
        Title = category,
        AriaLabel = category
    };

    private void ToggleDrawer() => isDrawerOpen = !isDrawerOpen;

    private void OnSelectedItemChanged(BitNavItem item)
    {
        if (!string.IsNullOrEmpty(item.Url))
        {
            NavigationManager.NavigateTo(item.Url);
            selectedItem = item;
        }

        isDrawerOpen = false;
    }

    private void UpdateSelectedItem()
    {
        var currentUri = NavigationManager.Uri;
        var currentPath = new Uri(currentUri).PathAndQuery;

        selectedItem = FindMatchingItem(sidebarItems, currentPath);
        StateHasChanged();
    }

    private BitNavItem FindMatchingItem(List<BitNavItem> items, string currentPath)
    {
        foreach (var item in items)
        {
            if (item.Url != null && currentPath.StartsWith(item.Url, StringComparison.OrdinalIgnoreCase))
            {
                return item;
            }

            if (item.ChildItems != null)
            {
                var matchedChild = FindMatchingItem(item.ChildItems, currentPath);
                if (matchedChild != null)
                {
                    return matchedChild;
                }
            }
        }
        return new();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        NavigationManager.LocationChanged += (sender, args) => UpdateSelectedItem();
        StateHasChanged();
    }

    private async Task ToggleTheme()
    {
        await BitThemeManager.ToggleDarkLightAsync();
        var currentTheme = await BitThemeManager.GetCurrentThemeAsync();
        IsDark = currentTheme.Contains("dark");
    }
}