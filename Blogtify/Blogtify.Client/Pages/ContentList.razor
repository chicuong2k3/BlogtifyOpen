@page "/"
@using Blogtify.Client.Services

@inject NavigationManager NavigationManager
@inject AppDataManager AppDataManager

<BitCard NoShadow FullWidth Background="BitColorKind.Transparent">

    <BitStack Gap="1rem">
        <BitText Typography="BitTypography.H1">Các bài viết</BitText>
        <BitStack Horizontal HorizontalAlign="BitAlignment.SpaceBetween" Alignment="BitAlignment.End">
            <BitSearchBox Placeholder="Tìm kiếm bài viết..."
                          Color="BitColor.Info"
                          Modeless ThrottleTime="0" FixedIcon="true" 
                          OnSearch="OnSearchTriggered"
                          Background="BitColorKind.Primary"
                          Style="flex: 1;" />

            <BitDropdown Items="_categories" AriaLabel="Danh mục" Label="Danh mục"
                         @bind-Value="_selectedCategory" Placeholder="Tất cả"
                         TItem="BitDropdownItem<string>" TValue="string" 
                             OnChange="OnCategoryChanged"
                             Style="max-width: 150px"
                         >
            </BitDropdown>

            <BitDropdown Items="_sortFilters" TItem="BitDropdownItem<string>"
                         TValue="string" AriaLabel="Sắp xếp theo" Label="Sắp xếp theo"
                         @bind-Value="_selectedSortValue"
                         OnChange="OnSortChanged" FitWidth="true">
            </BitDropdown>
        </BitStack>

        <BitShimmer Loaded="@(!_isLoading)"
                    Background="BitColor.Success" AriaLabel="Loading content" Height="1rem">

            @if (Contents is not null && Contents.Any())
            {
                <BitStack Gap="8px">
                    @foreach (var content in Contents)
                    {
                        <ContentCard Content="@content" @key="@content.GetHashCode()" />
                    }
                </BitStack>
            }
            else
            {
                <BitText Typography="BitTypography.Subtitle1" Style="font-weight: 600">Không có kết quả nào.</BitText>
            }

        </BitShimmer>

    </BitStack>


</BitCard>

@code {
    [PersistentState(AllowUpdates = true)]
    public List<Content>? Contents { get; set; }
    private List<BitDropdownItem<string>> _sortFilters = new()
    {
        new() { Text = "Mới nhất", Value = "desc" },
        new() { Text = "Cũ nhất", Value = "asc" }
    };

    private string _selectedSortValue = "desc";

    private List<BitDropdownItem<string>> _categories = [];
    private string _selectedCategory = string.Empty;

    private bool _isLoading = true;

    [SupplyParameterFromQuery]
    public string Query { get; set; } = string.Empty;

    [SupplyParameterFromQuery(Name = "categories")]
    public string[] Categories { get; set; } = Array.Empty<string>();

    private string _prevQuery = string.Empty;
    private string _prevCategoriesKey = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        LoadCategories();
        await LoadPosts();
    }

    protected override async Task OnParametersSetAsync()
    {
        var currentCategoriesKey = string.Join(",", Categories ?? Array.Empty<string>());
        if (_prevQuery != Query || _prevCategoriesKey != currentCategoriesKey)
        {
            _prevQuery = Query;
            _prevCategoriesKey = currentCategoriesKey;

            await LoadPosts(forceReload: true);
        }


    }

    private void LoadCategories()
    {
        _categories = new() { new BitDropdownItem<string>() { Text = "Tất cả", Value = string.Empty } };
        _categories.AddRange(AppDataManager.AllPostCategories.Select(c => new BitDropdownItem<string>()
        {
            Text = c,
            Value = c
        }).ToList());
    }

    private async Task LoadPosts(bool forceReload = false)
    {
        _isLoading = true;

        if (Contents == null || forceReload)
        {
            Contents = await AppDataManager.GetContentsAsync(Query ?? string.Empty, Categories.ToList());
            Contents = Contents
                .OrderByDescending(c => c.LastModified ?? DateTime.MinValue)
                .ToList();
        }

        await OnSortChanged(_selectedSortValue);

        _isLoading = false;
    }

    private async Task OnSortChanged(string value)
    {
        if (!string.IsNullOrEmpty(value))
        {
            _selectedSortValue = value;
            Contents = _selectedSortValue?.ToLowerInvariant() switch
            {
                "asc" => Contents
                    ?.OrderBy(p => p.LastModified ?? DateTime.MinValue)
                    .ToList(),
                "desc" => Contents
                    ?.OrderByDescending(p => p.LastModified ?? DateTime.MinValue)
                    .ToList(),
                _ => Contents?.OrderBy(p => p.LastModified ?? DateTime.MinValue).ToList()
            };
        }
    }

    private async Task OnCategoryChanged(string value)
    {
        if (!string.IsNullOrWhiteSpace(value))
        {
            NavigationManager.NavigateTo($"/?categories={value}");
        }
        else
        {
            NavigationManager.NavigateTo("/");
        }

    }

    private void OnSearchTriggered(string? text)
    {
        if (string.IsNullOrWhiteSpace(text)) return;
        NavigationManager.NavigateTo($"?Query={text}");
    }
}
