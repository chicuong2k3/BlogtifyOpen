@page "/"

@inject NavigationManager NavigationManager
@inject AppDataManager AppDataManager
@inject PersistentComponentState State

<BitCard NoShadow FullWidth Background="BitColorKind.Transparent">

    <BitStack Gap="1rem">
        <BitText Typography="BitTypography.H1">Các bài viết</BitText>
        <BitStack Alignment="BitAlignment.End">
            <BitDropdown Items="_sortFilters" TItem="BitDropdownItem<string>"
                         TValue="string" AriaLabel="Sắp xếp theo" Label="Sắp xếp theo"
                         @bind-Value="_selectedSortValue"
                         OnChange="OnSortChanged" FitWidth="true">
            </BitDropdown>
        </BitStack>

        <BitShimmer Loaded="@(!_isLoading)"
                    Background="BitColor.Success" AriaLabel="Loading content" Height="1rem">

            @if (_contents.Any())
            {
                <BitStack Gap="8px">
                    @foreach (var content in _contents.Take(_currentPage * Constants.PageSize))
                    {
                        <ContentCard Content="@content" @key="@content.GetHashCode()" />
                    }
                </BitStack>
            }
            else
            {
                <BitText Typography="BitTypography.Subtitle1" Style="font-weight: 600">Không có kết quả nào.</BitText>
            }

            @if (_hasMore)
            {
                <BitStack Alignment="BitAlignment.Center">
                    <BitButton OnClick="LoadMore"
                               IsLoading="_isLoading"
                               ButtonType="BitButtonType.Button">
                        Tải thêm
                    </BitButton>
                </BitStack>
            }

        </BitShimmer>

    </BitStack>


</BitCard>

@code {
    private List<ContentDto> _contents = new();
    private List<BitDropdownItem<string>> _sortFilters = new()
    {
        new() { Text = "Mới nhất", Value = "desc" },
        new() { Text = "Cũ nhất", Value = "asc" }
    };

    private int _currentPage = 1;
    private string _selectedSortValue = "desc";
    private int _totalContent;
    private bool _isLoading = true;
    private bool _hasMore => _currentPage * Constants.PageSize < _contents.Count();

    private PersistingComponentStateSubscription? persistingSubscription;

    [SupplyParameterFromQuery]
    public string Query { get; set; } = string.Empty;

    [SupplyParameterFromQuery(Name = "categories")]
    public string[] Categories { get; set; } = Array.Empty<string>();

    protected override async Task OnParametersSetAsync()
    {
        await LoadPosts();
    }

    private async Task LoadPosts()
    {
        _isLoading = true;

        persistingSubscription = State.RegisterOnPersisting(() =>
        {
            State.PersistAsJson("contents", _contents);
            return Task.CompletedTask;
        });

        if (!State.TryTakeFromJson<List<ContentDto>>("contents", out var restored))
        {
            _contents = await AppDataManager.GetContentsAsync(Query ?? string.Empty, Categories.ToList(), _selectedSortValue);
        }
        else
        {
            _contents = restored ?? new();
        }

        _isLoading = false;
    }

    private void LoadMore()
    {
        _currentPage++;
        StateHasChanged();
    }

    private async Task OnSortChanged(string value)
    {
        if (!string.IsNullOrEmpty(value))
        {
            _selectedSortValue = value;
            _currentPage = 1;
            _contents.Clear();
            await LoadPosts();
        }
    }
}
